package pax.actionhandler.basic;import com.mongodb.gridfs.GridFSDBFile;import com.mpush.api.push.*;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import org.apache.log4j.Logger;import org.json.JSONException;import pax.model.SessionVar;import pax.netty.server.TmsServer;import pax.service.CacheService;import pax.util.CmdUtils;import pax.util.Context;import sand.annotation.Ajax;import sand.annotation.CandoCheck;import sand.basic.Global;import sand.depot.tool.system.BillNoGenerator;import sand.depot.tool.system.SystemKit;import sand.utils.JsonTool;import tool.dao.*;import tool.dao.mongodb.MongoDB;import javax.net.ssl.SSLException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.SocketException;import java.net.UnknownHostException;import java.security.cert.CertificateException;import java.sql.Connection;import java.sql.SQLException;import java.text.ParseException;import java.util.Enumeration;import java.util.List;import java.util.UUID;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.LockSupport;/** * <p> * <p> * Title: 系统首页 - 个人中心 * </p> * <p> * Description: 系统首页 - 个人中心含插件、动态、快捷功能、用户信息等 * </p> * <p> * Copyright: Copyright (c) 2012 * </p> * * @author suliangben * @version 1.0 */public class HomeAH extends sand.actionhandler.basic.HomeAH {    private Logger logger = Logger.getLogger(HomeAH.class);    //    private VersionService versionService;    private static boolean isNotStart = true;    private static EventLoopGroup bossGroup;    private static EventLoopGroup workerGroup;    public HomeAH(HttpServletRequest req, HttpServletResponse res) {        super(req, res);        //this._objType = "employee";        // TODO Auto-generated constructor stub    }    public void index() throws SQLException {        this._nextUrl = "/template/index.jsp";    }    //开启服务    public void startServer2() throws CertificateException, SSLException {        if (isNotStart) {            System.out.println("the server has been stop and try to start server!!!");            new Thread() {                @Override                public void run() {                    try {                        TmsServer.start();                    } catch (Exception e) {                        e.printStackTrace();                        isNotStart = true;                    }                }            }.start();            isNotStart = false;            this._tipInfo = "the server has been started!!!";        } else {            System.out.println("the server has been started!!!");            this._tipInfo = "the server is running !!!";        }        this._request.setAttribute("msg_type", "SUCCESS");        this._nextUrl = super._msgUrl;    }    public void startServer() throws CertificateException, SSLException {        this._tipInfo = "the server is running !!!";        if (bossGroup == null && workerGroup == null) {            bossGroup = new NioEventLoopGroup(1);            workerGroup = new NioEventLoopGroup();            TmsServer.start(bossGroup, workerGroup);            logger.info("[HomeAH startServer]PORT=" + SystemKit.getCacheParamById("tms_server", "tms_port") + ",dll_server_url=" + SystemKit.getCacheParamById("dll_server", "dll_server") + ", the server has been started in the first time !!!");            System.out.println("the server has been started in the first time !!!");            this._tipInfo = "the server has been started in the first time !!!";        }        if (bossGroup.isShutdown()) {            bossGroup = new NioEventLoopGroup(1);            workerGroup = new NioEventLoopGroup();            TmsServer.start(bossGroup, workerGroup);            logger.info("[HomeAH startServer]PORT=" + SystemKit.getCacheParamById("tms_server", "tms_port") + ",dll_server_url=" + SystemKit.getCacheParamById("dll_server", "dll_server") + ", the server has been started!!!");            System.out.println("the server has been started!!!");            this._tipInfo = "the server has been started!!!";        }        this.setAttribute("nextUrl", "basic.HomeAH.setServer");        this._request.setAttribute("msg_type", "SUCCESS");        this._nextUrl = super._msgUrl;    }    //结束服务    public void endServer() throws CertificateException, SSLException {        this._tipInfo = "the server is not running!!!";        if (bossGroup != null && workerGroup != null) {            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();            if (bossGroup.isShuttingDown() && workerGroup.isShuttingDown()) {                System.out.println(" the server has been terminated !!!");                this._tipInfo = " the server has been terminated !!!";            } else {                System.out.println(" the server can not be terminated !!!");                this._tipInfo = "the server can not be terminated !!!";            }        }        this.setAttribute("nextUrl", "basic.HomeAH.setServer");        this._request.setAttribute("msg_type", "SUCCESS");        this._nextUrl = super._msgUrl;    }    //结束服务    public void restartServer() throws CertificateException, SSLException, InterruptedException {        this._tipInfo = "the server is not running !!!";        if (bossGroup != null && workerGroup != null && !bossGroup.isShutdown() && !workerGroup.isShutdown()) {            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();            Thread.sleep(3000);            bossGroup = new NioEventLoopGroup(1);            workerGroup = new NioEventLoopGroup();            TmsServer.start(bossGroup, workerGroup);            logger.info("[HomeAH restartServer]PORT=" + SystemKit.getCacheParamById("tms_server", "tms_port") + ",dll_server_url=" + SystemKit.getCacheParamById("dll_server", "dll_server") + ", the server has been started successfully !!!");            this._tipInfo = "the server has been started successfully !!!";        }        this.setAttribute("nextUrl", "basic.HomeAH.setServer");        this._request.setAttribute("msg_type", "SUCCESS");        this._nextUrl = super._msgUrl;    }    public void setServer() throws SocketException, UnknownHostException, SQLException {        InetAddress[] allByName = InetAddress.getAllByName(SystemKit.getCacheParamById("tms_server", "hostname"));        this.setAttribute("dll_server_url", SystemKit.getCacheParamById("dll_server", "dll_server"));        this.setAttribute("port", SystemKit.getCacheParamById("tms_server", "tms_port"));        this.setAttribute("localhost", getIP());        this.setAttribute("remotehost", allByName[0]);        this._nextUrl = "template/dll_server.jsp";    }    @Ajax    public String index5() throws SQLException, JSONException {        logger.info(_request.getSession().getId());        this._nextUrl = "/index.template";        this._nextUrl = "/template/basic/admin/index.template";        return "ok";    }    private SessionVar getVar() {        logger.info("session id +" + _request.getSession().getId());        Object obj = _request.getSession().getAttribute(Context.VAR);        if (obj == null) {            logger.info("create session var ");            obj = new pax.model.SessionVar();            _request.getSession().setAttribute(Context.VAR, obj);        }        return (SessionVar) obj;    }    private void saveVar2(SessionVar sv) {        _request.getSession().setAttribute(Context.VAR, sv);    }    @Ajax    public String testSet() {        SessionVar sv = this.getVar();        sv.setIp(this.getParameter("ip"));//.setId(900);        //this._request.setAttribute("var", sv);        return sv.getIp() + "  " + sv.getToken();    }    @Ajax    public String testSession() {        //SessionVar sv = this.getVar();        //sv.setIp(this.getParameter("ip"));//.setId(900);        //this._request.setAttribute("var", sv);        for (int i = 0; i < 1000; i++) {            this._request.getSession().setAttribute("session" + UUID.randomUUID(), UUID.randomUUID());        }        logger.info(_request.getSession().getValueNames().length);//		for(int i=0;i<1000;i++){//			this._request.getSession().getAttribute("session"+UUID.randomUUID());	//		}		        return "";    }    @Ajax    public String testGet() {        SessionVar sv = this.getVar();        return sv.getIp() + "  " + sv.getToken();        //sv.setId(900);        //this._request.setAttribute("var", sv);    }    public void showUpload() {        this._nextUrl = "/template/upload/upload.template";    }    @Ajax    public String upload() throws IOException {        File f = this.getUploadFile();        String ret = "";        ret = ret + "  file size is " + f.length();        logger.info("file size is " + f.length());        String md5 = CmdUtils.encodeMD5(f);        ret = ret + "    file md5 is " + md5;        logger.info("file md5 is " + md5);        String sha2 = CmdUtils.encodeSHA256(f);        logger.info("file sha2 is " + sha2);        ret = ret + "    file sha2 is " + sha2;        MongoDB mdb = DBPool.getMongoDB("paxfile");//.getInstance()        mdb.saveFile(f, sha2, this.getParameter("filename"));        return "upload successful.. " + ret;    }    public void download_raw() throws IOException {//		MongoDB mdb = DBPool.getMongoDB("paxfile");//.getInstance()        String sha2 = this.getParameter("id");//		GridFSDBFile f = mdb.getFile(fname);//		if(f==null) throw new InfoException("文件不存在");        this._dispatched = true;        //MongoFile file=CacheService.getInstance().getFile(sha2);        //MongoFile file = new MongoFile();        GridFSDBFile filedata = DBPool.getMongoDB(MongoDB.T_FILE).getFile(sha2);        //byte[] fdata=CacheService.getInstance().getMongoFileData(filedata);//		file.filename="";//		file.data=fdata;        _response.addHeader("Content-Disposition", "attachment; filename=\""                + "raw" + "\"");//        filedata.writeTo(_response.getOutputStream());        _response.getOutputStream().close();//		byte[] data=file.data;//		_response.getOutputStream().write(data);//		_response.getOutputStream().close();        //_response.getOutputStream().write();        //this._response    }    @Ajax    public String imp() throws SQLException {        this.getJdo().beginTrans();        String result = this.ReadFile(this.getUploadFile());        try {            BizObject biz = JsonTool.toBiz(result);            List<BizObject> provinces = (List) biz.get("list");            for (BizObject p : provinces) {                p.resetObjType("area");                p.setID(null);                p.set("parentid", "3f1e525588da47eca3e5df033486659f");                p.set("depth", 2);                this.getJdo().add(p);                List<BizObject> citys = (List) p.get("city");                for (BizObject c : citys) {                    c.resetObjType("area");                    c.setID(null);                    c.set("parentid", p.getId());                    c.set("depth", 3);                    this.getJdo().add(c);                    List<BizObject> districts = (List) c.get("district");                    for (BizObject d : districts) {                        d.resetObjType("area");                        d.setID(null);                        d.set("parentid", c.getId());                        d.set("depth", 4);                        this.getJdo().add(d);                    }                }            }            return biz.toJsonString();            //biz=JsonTool.toBizObj(result);        } catch (JSONException e) {            // TODO Auto-generated catch block            logger.error("error:", e);            e.printStackTrace();            //return new OpenServiceException("2001").toBiz();        }        return "";    }    private String getPath() {        String commandLine = "pwd";        Runtime runTime = Runtime.getRuntime();        Process process;        int code = -1;        String ret = "";        try {            process = runTime.exec(commandLine);            InputStream fis = process.getInputStream();            //用一个读输出流类去读            InputStreamReader isr = new InputStreamReader(fis);            //用缓冲器读行            BufferedReader br = new BufferedReader(isr);            String line = null;            //直到读完为止            while ((line = br.readLine()) != null) {                System.out.println(line);                ret = ret + line + "\r\n";            }            logger.info(ret);            fis.close();            isr.close();            br.close();            code = process.waitFor();        } catch (Exception e) {            // TODO Auto-generated catch block            logger.error(e);            e.printStackTrace();            //ret=JDO.getStackTrace(e);        }        return ret;    }//	private static final String[] COMMAND_INTERPRETER = {"/bin/sh","-c"}; 	    @Override    @CandoCheck("exec")    public void exec() throws SQLException {        //String path=SystemKit.getParamById("system_core", "build_path");//		String path=this.getParameter("path");//		if (StringUtils.isBlank(path)){//			path="/home/pax-dev/rds";//		}//		String commandLine = " svn up "+path;//		String commandLine2 = "gradle -b "+path+"/build.gradle  classes";          //String path=this.getPath();        //File dir=new File(ProcessBuilder.);        //	logger.info("dir "+dir.getAbsolutePath());        String command = this.getParameter("cmd");        //	String[] comm = new String[3];        //comm[0] = COMMAND_INTERPRETER[0];        //	comm[1] = COMMAND_INTERPRETER[1];        //	comm[2] = command;        long start = System.currentTimeMillis();        //System.out.println("comm "+comm[0]+"  "+comm[1]+"  "+comm[2]);        Runtime runTime = Runtime.getRuntime();        Process process;        int code = -1;        String ret = "";        try {            process = runTime.exec(command);            InputStream fis = process.getInputStream();            //用一个读输出流类去读            InputStreamReader isr = new InputStreamReader(fis);            //用缓冲器读行            BufferedReader br = new BufferedReader(isr);            String line = null;            //直到读完为止            while ((line = br.readLine()) != null) {                System.out.println(line);                ret = ret + line + "\r\n" + "<br>";            }            logger.info(ret);            fis.close();            isr.close();            br.close();            code = process.waitFor();        } catch (Exception e) {            // TODO Auto-generated catch block            logger.error(e);            e.printStackTrace();            ret = JDO.getStackTrace(e);        }        this.setAttribute("cmd", command);        this.setAttribute("exec_result", ret);        this._nextUrl = "/template/basic/exec.template";        //return ret;//		this._tipInfo = "Ant 指令运行成功！返回结果为 \r\n"+ret;//		this._nextUrl="/template/basic/msg.template?showtime=20";    }    //public    //读文件，返回字符串    public String ReadFile(File file) {        //File file = new File(path);        BufferedReader reader = null;        String laststr = "";        try {            //System.out.println("以行为单位读取文件内容，一次读一整行：");            reader = new BufferedReader(new FileReader(file));            String tempString = null;            int line = 1;            //一次读入一行，直到读入null为文件结束            while ((tempString = reader.readLine()) != null) {                //显示行号                // System.out.println("line " line ": " tempString);                laststr = laststr + tempString;                // line ;            }            reader.close();        } catch (IOException e) {            e.printStackTrace();        } finally {            if (reader != null) {                try {                    reader.close();                } catch (IOException e1) {                }            }        }        return laststr;    }    public void download() throws IOException {//		MongoDB mdb = DBPool.getMongoDB("paxfile");//.getInstance()        String sha2 = this.getParameter("id");//		GridFSDBFile f = mdb.getFile(fname);//		if(f==null) throw new InfoException("文件不存在");        this._dispatched = true;        CacheService.getInstance().writeFile(sha2, "paxfile", _response, 0);//		_response.addHeader("Content-Disposition", "attachment; filename=\""//				+ file.filename + "\"");//	//	File f;//	//	f.//////		//f.writeTo(_response.getOutputStream());////		byte[] data=file.data;//		_response.getOutputStream().write(data);//		_response.getOutputStream().close();        //_response.getOutputStream().write();        //this._response    }    @Ajax    public String delFile() {        MongoDB mdb = DBPool.getMongoDB("paxfile");//.getInstance()        String fname = this.getParameter("filename");        mdb.removeFile(fname);        return "del file successed";        //GridFSDBFile f = mdb.getFile(fname);    }    /**     * 常见问题     *     * @return     * @throws SQLException     */    public List<BizObject> getCommonProblem() throws SQLException {        StringBuilder sql = new StringBuilder("select * from article where ispublish='1' and article_type='cjwt' order by istop desc,createdate desc");        List<BizObject> list = QueryFactory.executeQuerySQL(sql.toString(), new PageVariable(6));        return list;    }    /**     * 最新公告     *     * @return     * @throws SQLException     */    public List<BizObject> getLatestArticle() throws SQLException {        StringBuilder sql = new StringBuilder("select * from article where ispublish='1' and article_type='zxgg' order by istop desc,createdate desc");        List<BizObject> list = QueryFactory.executeQuerySQL(sql.toString(), new PageVariable(6));        return list;    }    //当前用户    public BizObject getEmployee() throws SQLException {        BizObject employee = QueryFactory.getInstance("employee").getByID(this._curuser.getId());        //BizObject employee=_curuser;        //employee.set("telno", MemberAH.cutTelno(employee.getString("telno")));        return employee;    }    @Ajax    public String delRedisKey() {        CacheService.getInstance().del(this.getParameter("key"));        return "ok";    }    @Ajax    public String getRedisKey() {        return CacheService.getInstance().get(this.getParameter("key"));        //return "ok";    }    @Ajax    public String testMS() {        String ret = "";        BizObject b = new BizObject("re_general");        try {            Connection con = DBPool.getInstance().getROConnectionRaw();            logger.info("query con is " + con);            logger.info("size " + b.getQF().query(con).size());            ret = "before:" + b.getQF().query(con).size();            b.set("aid", "aaa");            b.set("bid", "bbb");            this.getJdo().add(b);            logger.info("jdo con is " + this.getJdo().getCon());            ret = ret + "  after:" + b.getQF().query(con).size();            con.close();        } catch (SQLException e) {            e.printStackTrace();        }        return ret;    }    @Ajax    String asave() {        return "";    }    @Ajax    public String items() throws SQLException {        BizObject it = new BizObject("item");        List<BizObject> v = it.getQF().query();        BizObject b = new BizObject();        b.set("records", v);        return b.toString();    }    public void testAngular() throws SQLException {        this._nextUrl = "/angular/test1.html";    }    public void memo() throws SQLException {        this._nextUrl = "/angular/memo.html";    }    @Ajax    public String testSN2() {        //ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);        //Lock lock = new ReentrantLock();隽秀        //RedisLock lock = new RedisLock("100");        //RedisLock lock2 = new RedisLock("200");        // RedisLock lock3 = new RedisLock("300");        String prefix = this.getParameter("prefix");        for (int i = 0; i < 120; i++) {            Global.executorService.execute(new Runnable() {                @Override                public void run() {                    logger.info("sn ............." + BillNoGenerator.getRedisFlowNo(prefix, (String) null, 5));//getRedisFlowNo("abc", (String)null, 5);                    //System.out.println("sn ............."+BillNoGenerator.getRedisFlowNo("CPWT", "", 5));//getRedisFlowNo("abc", (String)null, 5);                    //sayhello();//					sayhello();//					sayhello();                }            });            //thread.start();        }        return "ok";    }    @Ajax    public String alloc() {        return null;    }    @Ajax    public Object testPush() throws ExecutionException, InterruptedException {        PushSender sender = PushSender.create();        if (!sender.isRunning())            sender.start().join();        //Thread.sleep(1000);        for (int i = 0; i < 1; i++) {            PushMsg msg = PushMsg.build(MsgType.MESSAGE, "this a first push. I am your dog !!!");            //msg.setContent();            msg.setMsgId("msgId_" + i);            //msg.setContent("asefasrgasrgagrwawgrawghaeghaegqaeqwtghewth");            PushContext context = PushContext.build(msg)                    .setAckModel(AckModel.AUTO_ACK)                    .setUserId("user-" + i)                    .setBroadcast(false)                    //.setTags(Sets.newHashSet("test"))                    //.setCondition("tags&&tags.indexOf('test')!=-1")                    //.setUserIds(Arrays.asList("user-0", "user-1"))                    .setTimeout(2000)                    .setCallback(new PushCallback() {                        @Override                        public void onResult(PushResult result) {//							BizObject b = new BizObject("moban");//							b.set("name","bigmoban");//							JDO  jdo = new JDO();//							try {//								jdo.add(b);//							} catch (SQLException e) {//								e.printStackTrace();//							}//							jdo.close();                            logger.info("xxxxx  in  call back  ");                            System.err.println("\n\n" + result);                        }                    });            FutureTask<PushResult> future = sender.send(context);            logger.info("future is  " + future.get());            //System.err.println("\n\n" + future.get());        }        LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(30));        return "success";    }    public static void main(String args[]) {//		InitialConn.initialAppStore();//		//System.out.println("SINGLETON "+SingletonStructure.getInstance());//		//System.out.println("dbinfo "+SingletonStructure.getInstance().getDBInfo("employee"));//		BizObject b = new BizObject("employee");//		//System.out.println("iseiditable "+b.isEditable());//		int[] i = new int[2];//		for(int x:i){//			System.out.println(x);//		}        String uri = HomeAH.class.getClassLoader()                .getResource("").toExternalForm()                .substring(5);        System.out.println(uri);        File f = new File(uri);        String parent = f.getParent();        System.out.print(f.getParent());        PushSender sender = PushSender.create();        sender.start().join();        //Thread.sleep(1000);        for (int i = 0; i < 1; i++) {            PushMsg msg = PushMsg.build(MsgType.MESSAGE, "this a first push.");            msg.setMsgId("msgId_" + i);            PushContext context = PushContext.build(msg)                    .setAckModel(AckModel.AUTO_ACK)                    .setUserId("user-" + i)                    .setBroadcast(false)                    //.setTags(Sets.newHashSet("test"))                    //.setCondition("tags&&tags.indexOf('test')!=-1")                    //.setUserIds(Arrays.asList("user-0", "user-1"))                    .setTimeout(2000)                    .setCallback(new PushCallback() {                        @Override                        public void onResult(PushResult result) {                            System.err.println("\n\n" + result);                        }                    });            FutureTask<PushResult> future = sender.send(context);            //System.err.println("\n\n" + future.get());        }        LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(30));        //QEncryptClassUtil.encrypt2(uri, parent);//		long s1 = System.currentTimeMillis();//		String s ="";//		StringBuffer s2=new StringBuffer("");//		for(int i=1;i<10000000;i++){//			s=s+"abc";//			//s2.append("abc");//		}        //	System.out.println(""+(System.currentTimeMillis()-s1));    }    public void viewPlugins() throws SQLException, ParseException, UnknownHostException, SocketException {        if (this._curuser != null) {//            String scnt = SystemKit.getParamById("pluginManage", "cnt");//            int cnt = 10;//            try {//                if (StringUtils.isNotBlank(scnt)) cnt = Integer.parseInt(scnt);//            } catch (Exception e) {//                e.printStackTrace();//            }//            List<BizObject> setTopsList = this.getSetTops();//            List<DBObject> clicksList = this.cntClicks(setTopsList);//            if(setTopsList.size()<cnt && clicksList.size()>0){//                int index = (cnt-setTopsList.size())>clicksList.size()?clicksList.size(): (cnt-setTopsList.size());//                for(int i=0;i<index;i++){//                    BizObject biz = new BizObject("");//                    DBObject db = (DBObject)clicksList.get(i).get("_id");//                    //				if(obj!=null && obj.get("request_url")!=null && StringUtils.isNotBlank(obj.get("request_url").toString()))//                    biz.set("name", SystemKit.getCacheParamById("plugins", db.get("action").toString()));//                    biz.set("link_desktop_id", db.get("action").toString());//                    biz.set("counts", clicksList.get(i).get("counts"));//                    biz.set("isclick", "1");//1：是点击的统计 非1：set的置顶//                    setTopsList.add(biz);//                }//            }//            this._request.setAttribute("cnt", cnt);//            this._request.setAttribute("myPluginList", setTopsList);            //查询版本            BizObject ver = new BizObject("");//            BizObject re = versionService.list(ver, this.preparePageVar());//            if(!re.getString("respcode").equals(ReturnCode.SUCCESS)) //不报错//            {//                ver.set("v_code", "");//                ver.set("v_name", "");////            }else//            {//                List<BizObject> list=(List<BizObject>)re.get("objList");//                if(list.size()>0)//                {//                    BizObject biz=list.get(0);//                    ver.set("v_code", biz.getString("v_code"));//                    ver.set("v_name", biz.getString("v_name"));//                }else//                {//                    ver.set("v_code", "");//                    ver.set("v_name", "");//                }////            }            ver.set("v_code", "v001");            ver.set("v_name", "beta");            this.setAttribute("ver", ver);        }        this._nextUrl = "/template/welcome.jsp";    }    public static void main2(String args[]) {    }    private String getIP() throws SocketException {        Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();        while (networkInterfaces.hasMoreElements()) {            NetworkInterface networkInterface = networkInterfaces.nextElement();            Enumeration<InetAddress> inetAddresses = networkInterface.getInetAddresses();            while (inetAddresses.hasMoreElements()) {                InetAddress inetAddress = inetAddresses.nextElement();                String name = networkInterface.getDisplayName();                if (inetAddress.isSiteLocalAddress() && !(name.contains("Adapter")                        || name.contains("Virtual") || name.contains("VMnet") || name.contains("#"))) {                    String hostAddress = inetAddress.getHostAddress();                    return hostAddress;                }            }        }        return "";    }}