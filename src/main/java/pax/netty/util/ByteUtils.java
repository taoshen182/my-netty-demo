package pax.netty.util;


import com.landi.tms.thirdinterface.PaxRule;
import com.landi.tms.thirdinterface.Rule;
import org.apache.commons.lang.ArrayUtils;
import org.apache.poi.util.HexDump;
import org.apache.tomcat.util.buf.HexUtils;
import org.jpos.iso.ISOUtil;
import org.json.JSONException;
import org.junit.Test;
import org.junit.internal.Classes;
import tool.dao.BizObject;

import java.io.*;
import java.math.BigInteger;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.*;

import static org.bouncycastle.asn1.x500.style.RFC4519Style.o;
import static org.jpos.iso.BinaryPrefixer.BB;
import static org.junit.Assert.assertEquals;


/**
 * Created by xieke on 2017/4/20.
 */
public class ByteUtils {


    public static int int2BCD(int num) {
        
    /*A:取得十进制的字符串表示，相当于用数值运算，不断地除10，获得每个十进制位上的值*/
        String numStr = Integer.toString(num);

    /*B:每一个十进制数用BCD码表示，则相当于按照十六进制进行parse*/
        Integer bcdObj = Integer.parseInt(numStr, 16);

    /*C:获得一个新的值，此值会比以前大很多，注意是否会越界，属于设计时选取相应或合适的数据类型问题*/
        int bcdValue = bcdObj.intValue();
        return bcdValue;

    }

    public static int Str2BCD(String numStr) {

    /*A:取得十进制的字符串表示，相当于用数值运算，不断地除10，获得每个十进制位上的值*/
        // String numStr        = Integer.toString(num);

    /*B:每一个十进制数用BCD码表示，则相当于按照十六进制进行parse*/
        Integer bcdObj = Integer.parseInt(numStr, 16);

    /*C:获得一个新的值，此值会比以前大很多，注意是否会越界，属于设计时选取相应或合适的数据类型问题*/
        int bcdValue = bcdObj.intValue();
        return bcdValue;

    }

    public static void main(String args[]) {

        byte bbb[] = {0x02, 0x18};
        int jjj = ByteUtils.byte2BCD(bbb);
        System.out.println(jjj);
        String DMK = null;
        try {
            DMK = DESCoder.initKey();
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(DMK);
        int bcdValue = ByteUtils.int2BCD(12);

        System.out.println(bcdValue);
           /*验证*/
        String bcdReverseStr = Integer.toHexString(bcdValue);
        System.out.println(bcdReverseStr);
        int numReverse = Integer.parseInt(bcdReverseStr);

        System.out.println(numReverse);
        assertEquals(12, numReverse);

        Integer random = new Random().nextInt();
        BigInteger b = new BigInteger(random.toString());
        byte[] brandom = b.toByteArray();

        System.out.println(brandom.length);

        SimpleDateFormat myFmt1 = new SimpleDateFormat("yyMMddHHmmss");
        Date now = new Date();
        System.out.println(myFmt1.format(now));

        byte bdate[] = new byte[6];
        String s = myFmt1.format(now);

        for (int i = 0; i < 6; i++) {
            String d = s.substring(i * 2, i * 2 + 2);
            System.out.println(i + " " + d + "   ");
            bdate[i] = (byte) ByteUtils.Str2BCD(d);
        }


    }

    /**
     * XOR 校验码
     */
    static byte getCRCcode(byte[] data) {

        int tmp = 0, tmp1;
        //System.out.print("crc cal: ");
        for (int i = 0; i < data.length; i++) {
            tmp1 = tmp ^ data[i];
            tmp = tmp1;
            //System.out.print(Integer.toHexString(tmp) + " ");
        }
        // 与LRC (初始值0xff)异或
        // tmp = tmp ^ 0xff;

        //System.out.println(" crc_code is " + Integer.toHexString(tmp));

        return (byte) tmp;
    }

    public static short getDataLen(List<byte[]> bl) {
        short s = 0;
        for (byte[] b : bl) {
            s = (short) (s + b.length);
        }
        return s;

    }


    public static byte calLRC(List<byte[]> bl) {
        byte b = 0;
        for (byte[] bs : bl) {
            b = (byte) (b ^ getCRCcode(bs));


        }
        return b;

    }

    public static boolean compareByteArray(byte[] b1, byte[] b2) {
//1：


        if (b1 == null || b2 == null) {
            System.out.println("b1 " + b1 + "  b2 " + b2);
            return false;
        }
        if (b1.length == 0 || b2.length == 0) {
            return false;
        }
//2：
        if (b1.length != b2.length) {
            return false;
        }
//3：
        boolean isEqual = true;
        for (int i = 0; i < b1.length && i < b2.length; i++) {
            if (b1[i] != b2[i]) {
                System.out.println(b1[i] + "  different  " + b2[i]);
                isEqual = false;
                break;
            }
        }
        return isEqual;
    }

    public static byte[] createTSDATA() {
        Integer random = new Random().nextInt();
        BigInteger b = new BigInteger(random.toString());
        byte[] brandom = b.toByteArray();


        byte[] s_data = ByteUtils.byteMerger(brandom, createBCDDate());
        if (s_data.length != 10)
            throw new RuntimeException("大错特错");

        return s_data;
        //byte year =
    }

    public static byte[] createBCDDate() {
        SimpleDateFormat myFmt1 = new SimpleDateFormat("yyMMddHHmmss");
        Date now = new Date();
        String s = myFmt1.format(now);


        System.out.println(myFmt1.format(now));
        byte bdate[] = new byte[6];

        for (int i = 0; i < 6; i++) {
            String d = s.substring(i * 2, i * 2 + 2);

            bdate[i] = (byte) ByteUtils.Str2BCD(d);
        }
        return bdate;
    }

    public static byte[] bcd2Byte(int i) {
        String s = i + "";
        while (s.length() < 4) {
            s = "0" + s;
        }
        //String s1=s.substring(0,2);
        //String s2=s.substring(2,4);
        return hex2Bytes(s);


    }

    public static int byte2BCD(byte b[]) {

    /*A:取得十进制的字符串表示，相当于用数值运算，不断地除10，获得每个十进制位上的值*/
        // String numStr        = Integer.toString(num);

    /*B:每一个十进制数用BCD码表示，则相当于按照十六进制进行parse*/
        String hex = "";
        for (int i = 0; i < b.length; i++) {
            hex = hex + Integer.toHexString(b[i] & 0xFF);
        }
        //  String hex = Integer.toHexString(b[i] & 0xFF);

    /*C:获得一个新的值，此值会比以前大很多，注意是否会越界，属于设计时选取相应或合适的数据类型问题*/
//        System.out.println("hex is " + hex);
        int bcdValue = Integer.parseInt(hex);// bcdObj.intValue();
        return bcdValue;

    }

    /**
     * hex字符串转byte数组<br/>
     * 2个hex转为一个byte
     *
     * @param src
     * @return
     */
    public static byte[] hex2Bytes(String src) {
        byte[] res = new byte[src.length() / 2];
        char[] chs = src.toCharArray();
        for (int i = 0, c = 0; i < chs.length; i += 2, c++) {
            res[c] = (byte) (Integer.parseInt(new String(chs, i, 2), 16));
        }

        return res;
    }

    public static void printHexString(byte[] b) {
        // System.out.print(hint);
        for (int i = 0; i < b.length; i++) {
            String hex = Integer.toHexString(b[i] & 0xFF);
            if (hex.length() == 1) {
                hex = '0' + hex;
            }
            System.out.print(hex.toUpperCase() + " ");
        }
        System.out.println("");
    }

    //java 合并两个byte数组
    public static byte[] byteMerger(byte[] byte_1, byte[] byte_2) {
        byte[] byte_3 = new byte[byte_1.length + byte_2.length];
        System.arraycopy(byte_1, 0, byte_3, 0, byte_1.length);
        System.arraycopy(byte_2, 0, byte_3, byte_1.length, byte_2.length);
        return byte_3;
    }

    public static int byte2IntLen(byte b[]) {

        int sum = 0;

        for (byte bbb : b) {
            String s = Integer.toHexString(bbb);
            System.out.println("s = " + s);
            int i = Integer.parseInt(s, 16);
            sum += i;
        }
        return sum;

    }

    public static String byte2String(byte info[]) {

        String ret = "";
        for (byte b : info) {
            String s = Integer.toHexString(b);
            int i = Integer.parseInt(s, 16);
            ret += (char) i;

        }
        return ret;

    }

    //数据类型都是ASCII
    public static void printASC(byte info[]) {
        System.out.println(new String(info));
    }

    @Test
    public void testBcdLen() {

        int sum = 0;
        byte[] bcd = {0x00, 0x44};

        for (byte b : bcd) {
            String s = Integer.toHexString(b);
            System.out.println("s = " + s);
            int i = Integer.parseInt(s, 16);
            System.out.println("i = " + i);
            sum += i;
        }
        System.out.println("sum = " + sum);

    }

    @Test
    public void getdataInfo() {
        byte[] info = {0x63, 0x6F, 0x6D, 0x6D, 0x5F, 0x76, 0x65, 0x72, 0x3A, 0x31, 0x2E, 0x30, 0x30
                , 0x2E, 0x30, 0x30, 0x7C, 0x6F, 0x73, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x6D, 0x6F
                , 0x6E, 0x69, 0x74, 0x6F, 0x72, 0x20, 0x70, 0x6C, 0x75, 0x73, 0x7C, 0x6F
                , 0x73, 0x5F, 0x76, 0x65, 0x72, 0x3D, 0x32, 0x34, 0x2E, 0x30, 0x33, 0x2E
                , 0x31, 0x65, 0x7C, 0x70, 0x6F, 0x73, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x53, 0x35, 0x30, 0x30
        };
        byte[] filename = {0x55, 0x4D, 0x53, 0x5F, 0x55, 0x54, 0x4D, 0x53, 0x5F, 0x4D
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

//        byte[] a2 = {0x02 00 36 60 00 36 00 00 02 00 1A A2 01 00 00 07 D0 00 00 3A 98 00 00 00 03 84 00 00 00 64 00 00 00 00 00 00 00 35 03 03 7B
//        };
        for (byte b : filename) {
            String s = Integer.toHexString(b);
            int i = Integer.parseInt(s, 16);
            char i1 = (char) i;
            System.out.print(i1);
        }

    }

    @Test
    public void testmy() {
        String s = "comm_ver:1.00.00|os_name=monitor plus|os_ver=24.03.1e|pos_type=S500";

        String[] split = s.split("\\||\\=|\\:");
        for (String ss : split) {
            System.out.println("ss = " + ss);
        }

        byte ap[] = {0x05};
        int i = ByteUtils.byte2BCD(ap);
        System.out.println("i = " + i);
    }

    @Test
    public void teew() {
        String hex = Integer.toHexString(41);
        if (hex.length() == 1) {
            hex = '0' + hex;
        }

        int mm = Integer.parseInt(hex);
        System.out.println("i1 = " + mm);

        System.out.println("hex = " + hex);

        byte[] bytes = "41".getBytes();
        printHexString(bytes);
    }

    @Test
    public void tetstd() {
        //A1 44 29 CC
        List<byte[]> bl = new ArrayList<>();

        //A3 00 00 2E E0 6D 03
//        byte[] bt = {(byte) 0xA3, 0x00, 0x00, 0x2E, (byte) 0xE0}; //109  6D --->109

        //A1 1D 1D A1
//        byte[] bt = {(byte) 0xA1, (byte) 0x1D, (byte) 0x1D};   // -95  A1 --->161   (-128 <---> 127)

        //A3 00 00 27 10 94 03
//        byte[] bt = {(byte) 0xA3 , 0x00 , 0x00 , 0x27 , 0x10};

        //A1 44 29 CC 03
        byte[] bt = {(byte) 0xA1, 0x44, 0x29};

        bl.add(bt);
        byte b = ByteUtils.calLRC(bl);
        System.out.println("b = " + b);


    }

    @Test
    public void tsttsd() {
        byte[] asa = {0x00, 0x44};
        int i = ByteUtils.byte2IntLen(asa);
        System.out.println("i = " + i);

        String s = Integer.toHexString(68);
        System.out.println("s = " + s);

        byte b = (byte) Integer.parseInt(("0x" + s).substring(2), 16);

    }

    @Test
    public void ds() {
        byte[] cmd = {(byte) 0xA0};
        String s = ByteUtils.byte2String(cmd);
        System.out.println("s = " + s);
    }

    @Test
    public void dsas() throws JSONException {
//        String json = "{\"fid\":\"vsds\", \"ver\":\"vsds\", \"mid\":\"vsds\", \"cmd\":\"[B@63b2e683\", \"tpdu\":\"[B@70c5afb5\", \"sn\":\"vsds\", \"version\":\"vsds\"}";
//        BizObject biz = JsonTool.toBiz(json);
//
//
//        String cmds = biz.getString("cmd");
//
//        System.out.println("cmds = " + cmds);


        byte[] a = ISOUtil.hex2byte("a011");
        System.out.println(ISOUtil.hexString(a));
        byte[] fid = {0x50, 0x41, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
        byte[] mid = {0x50, 0x41, 0x58, 0x20, 0x53, 0x35, 0x30, 0x30, 0x20, 0x45, 0x46, 0x54, 0x2D, 0x50, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x20};
        byte[] sn = {0x36, 0x35, 0x30, 0x30, 0x30, 0x35, 0x36, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
        byte[] version = {0x30, 0x32};

        String str_fid = ByteUtils.byte2String(version).trim();
        System.out.println("str_fid = " + str_fid);

    }

    @Test
    public void testMysql() throws SQLException {
//        Properties pps = new Properties();
//        try {
//            pps.load(BaseTest.class.getClassLoader().getResourceAsStream("db.properties"));
//            DataSource mds = new DataSource();
//            mds.setMaxActive(Integer.parseInt(pps.getProperty("maxActive")));
//            mds.setUsername(pps.getProperty("username"));
//            mds.setPassword(pps.getProperty("password"));
//            mds.setDefaultAutoCommit(Boolean.valueOf(true));
//            mds.setUrl(pps.getProperty("master_url"));
//            mds.setDriverClassName(pps.getProperty("driverClassName"));
//            DBPool.init(mds);
//            List<String> schemas = new ArrayList<String>();
//            schemas.add("workflow");
//            schemas.add("app_store");
//            schemas.add("basic");
//            SingletonStructure.initialSchemaData(schemas);
//            SingletonStructure.getInstance().initialed = true;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
    }

    @Test
    public void dsdf111() throws IOException {
        BizObject data = new BizObject();
        data.set("DTPDU1", "6000040000");
        data.set("电话一", "83163166");
        data.set("本机IP", "172.17.233.243");

        String test = "DTPDU1  6000040000                                                                                                              " +
                "DTPDU2  6000040000                                                                                                              " +
                "DTPDU3  6000040000                                                                                                              " +
                "电话一  83163166                                                                                                                " +
                "电话二  61682441                                                                                                                " +
                "电话三  83163166                                                                                                                " +
                "密钥号  0                                                                                                                       " +
                "通讯类  R                                                                                                                       " +
                "本机IP  172.17.233.243                                                                                                          ";
        System.out.println("test = " + test.length());
        String tests2 = "DTPDU2  6000040000                                                                                                              ";
        String tests3 = "电话一  83163166                                                                                                                ";
        System.out.println("tests2 = " + tests2.length());
        System.out.println("tests3 = " + tests3.length());
//
//        System.out.println("test.getBytes().length = " + test.getBytes().length);
//        System.out.println("tests2.getBytes().length = " + tests2.getBytes().length);
//        System.out.println("tests3.getBytes().length = " + tests3.getBytes().length);


//        FileWriter fw = new FileWriter("C:\\Users\\want\\Desktop\\testenv.env");
//        fw.write(sb.toString());
//        fw.close();

    }

    @Test
    public void dssaaa() throws IOException {
        byte a[] = new byte[]{(byte) 0X00, (byte) 0X00, (byte) 0X00, (byte) 0X00, (byte) 0X00, (byte) 0X00};
        String s = new String(a, "gbk");
        System.out.println("s = " + s);

        byte aa[] = new byte[]{(byte) 0X20, (byte) 0X20, (byte) 0X20, (byte) 0X20, (byte) 0X20, (byte) 0X20};
        String ss = new String(aa, "gbk");
        System.out.println("ss = " + ss);
//        byte[] bb = s.getBytes("gbk");
//
//
//        ByteUtils.printHexString(bb);


//
//        byte[] bbb = str.getBytes("gbk");
//
//        File file = new File("C:\\Users\\want\\Desktop\\myenv22.env");
//        FileOutputStream fos = new FileOutputStream(file);
//        fos.write(bbb);
//        fos.close();
    }

    @Test
    public void asaaa() throws UnsupportedEncodingException {
        String t1 = "DTPDU1  6000040000                                                                                                              ";
        System.out.println("t1 = " + t1.length());
        byte[] gbks = t1.getBytes("gbk");
        System.out.println("gbks = " + gbks.length);


        String t2 = "电话一  83163166                                                                                                                ";
        System.out.println("t2 = " + t2.length());
        byte[] gbks2 = t2.getBytes("gbk");
        System.out.println("gbks2 = " + gbks2.length);

        String t3 = "电话一  83163166";
        byte[] gbks3 = t3.getBytes("gbk");

        byte[] bt128 = new byte[128];
        //小于128后面补 0x20

//        if (gbks3.length < 128) {
//            bt128
//        }

        ByteUtils.printHexString(bt128);
    }

    @Test
    public void dqqaaa() throws Exception {
        Class<com.landi.tms.thirdinterface.Rule> aClass = (Class<Rule>) Class.forName("com.landi.tms.thirdinterface.PaxRule");
        Rule rule = aClass.newInstance();
        String appName = rule.getAppName("C:\\Users\\want\\Desktop\\TMS资料\\U架构银行卡");
        String appVer = rule.getAppVer("C:\\Users\\want\\Desktop\\TMS资料\\U架构银行卡");
        System.out.println("appName = " + appName);
        System.out.println("appVer = " + appVer);
    }

    @Test
    public void dfss() {
        String s = "C:\\ApacheTomcat888\\bin\\.\\SCRIPTPOS2(vSXXV140418XHB)_sig - 副本.bin";
        String substring = s.substring(0, s.lastIndexOf(File.separator) + 1);
        System.out.println("substring = " + substring);

        boolean error = "read aipinfo error".contains("error");
        System.out.println("error = " + error);
    }

    @Test
    public void dssaasswwa() throws IOException {
        byte a[] = new byte[]{0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x37
                , 0x30, 0x30, 0x34, 0x33, 0x32, 0x32, 0x30, 0x53, 0x58, 0x58
                , 0x2D, 0x36, 0x35, 0x30, 0x30, 0x30, 0x35, 0x36, 0x32, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};

        byte b[] = new byte[]{0x00};
        byte c[] = new byte[]{0x6C, 0x00, 0x00, 0x00, 0x00, 0x00};

        byte d[] = new byte[]{

                0x30, 0x30,               //00
                0x37, 0x30, 0x30, 0x34,  //7004
                0x33, 0x32, 0x32, 0x30, 0x53, 0x58, 0x58, 0x2D,


                0x36, 0x35, 0x30, 0x30, 0x30, 0x35, 0x36, 0x32, // 65000562


                0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20};
        String s1 = new String(a);
        String s2 = new String(b);
        String s3 = new String(c);
        String s4 = new String(d);
        System.out.println("s = " + s1);
        System.out.println("s = " + s2);
        System.out.println("s = " + s3);
        System.out.println("s = " + s4);

        //7004	初始化
    }

    @Test
    public void fggd() throws Exception {

        //appName = CUP TMS
//        appVer = MAINV20170419D

        PaxRule paxRule = new PaxRule();
        String appName = paxRule.getAppName("C:\\Users\\want\\Desktop\\CUP_S3POS小额免密免签&国密V400143_本地版本\\OnlyBIN-170515\\App1");
        System.out.println("appName = " + appName);

        String appVer = paxRule.getAppVer("C:\\Users\\want\\Desktop\\CUP_S3POS小额免密免签&国密V400143_本地版本\\OnlyBIN-170515\\App1");
        System.out.println("appVer = " + appVer);
    }

    @Test
    public void fqqqggd() throws Exception {
        //appName = UP-POS
//        appVer = 400143
        PaxRule paxRule = new PaxRule();
        String appName = paxRule.getAppName("C:\\Users\\want\\Desktop\\CUP_S3POS小额免密免签&国密V400143_本地版本\\OnlyBIN-170515\\App2");
        System.out.println("appName = " + appName);

        String appVer = paxRule.getAppVer("C:\\Users\\want\\Desktop\\CUP_S3POS小额免密免签&国密V400143_本地版本\\OnlyBIN-170515\\App2");
        System.out.println("appVer = " + appVer);
    }

    @Test
    public void sdssa() {
        byte b[] = new byte[]{0x00, 0x6c};
        int i = ByteUtils.byte2IntLen(b);
        System.out.println("msg 长度 i = " + i);
    }

    @Test
    public void aza() {
//        byte b[] = new byte[]{
//                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x36, 0x39, 0x38, 0x64, 0x35, 0x31, 0x61, 0x31, 0x39, 0x64
//                , 0x38, 0x61, 0x31, 0x32, 0x31, 0x63, 0x65, 0x35, 0x38, 0x31
//                , 0x34, 0x39, 0x39, 0x64, 0x37, 0x62, 0x37, 0x30, 0x31, 0x36
//                , 0x36, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32
//                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
//                , 0x20, 0x20, 0x20, 0x20, 0x31, 0x30, 0x30, 0x30
//        };
//        System.out.println(" s = " + new String(b));

//        byte c[] = new byte[]{
////                0x02
////                , (byte) 0xf0
////                , 0x00, 0x07,
//                0x52, 0x45, 0x41, 0x44, 0x59
////                ,0x08, 0x02, 0x26, (byte) 0x83, (byte) 0xce, 0x3f
//        };
//        System.out.println("new  = " + new String(c));


        byte[] mm = new byte[]{
                0x33, 0x30, 0x39, 0x34, 0x53, 0x58, 0x58, 0x2D, 0x32, 0x4B, 0x34, 0x32, 0x37, 0x31, 0x37, 0x30, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
                , 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x39
                , 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x37
                , 0x64, 0x32, 0x36, 0x32, 0x30, 0x63, 0x31, 0x66, 0x32, 0x61, 0x30, 0x61, 0x34, 0x62, 0x35, 0x37
                , 0x64, 0x30, 0x38, 0x33, 0x38, 0x34, 0x30, 0x62, 0x63, 0x33, 0x31, 0x39, 0x30, 0x35
        };

        System.out.println("mm = " + new String(mm));


        byte[] nn = new byte[]{
                0x63, 0x6F, 0x6D, 0x6D, 0x5F, 0x76, 0x65, 0x72, 0x3D, 0x31
                , 0x2E, 0x30, 0x30, 0x2E, 0x30, 0x30, 0x7C, 0x6F, 0x73, 0x5F
                , 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x6D, 0x6F, 0x6E, 0x69, 0x74
                , 0x6F, 0x72, 0x20, 0x70, 0x6C, 0x75, 0x73, 0x7C, 0x6F, 0x73
                , 0x5F, 0x76, 0x65, 0x72, 0x3D, 0x33, 0x2E, 0x35, 0x36, 0x7C
                , 0x70, 0x6F, 0x73, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x53
                , 0x38, 0x30
        };

        System.out.println("nn = " + new String(nn));
    }

    public static byte[] intToBytes2(int n) {
        byte[] b = new byte[4];

        for (int i = 0; i < 4; i++) {
            b[i] = (byte) (n >> (24 - i * 8));

        }
        return b;
    }

    public static byte[] intToBytes(int n) {
        byte[] b = new byte[2];

        for (int i = 0; i < 2; i++) {
            b[i] = (byte) (n >> (8 - i * 8));

        }
        return b;
    }


    @Test
    public void fsda() {
//        byte[] bytes = intToBytes(63);
//        System.out.println("bytes = " + bytes.length);
//
//        System.out.println(bytes);
//        String s = ISOUtil.hexString(bytes);
//        System.out.println("s = " + s);
//
//        byte[] bytes1 = {0x00, 0x3f};
//        System.out.println("ss = " + ISOUtil.hexString(bytes1));
//
//        System.out.println(bytes == bytes1);

        byte cmd = (byte) 0xA0;
        System.out.println("===== 暂无该请求码 ===== " + ArrayUtils.toString(cmd));
        System.out.println(cmd == (byte) 0xA0);
    }

    @Test
    public void kld() {
        byte[] asa = new byte[]{
                //0x24, 0x00,
                0x43, 0x55, 0x50, 0x20, 0x54, 0x4D, 0x53, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x41, 0x49, 0x4E,
                0x56, 0x32, 0x30, 0x31, 0x37, 0x30, 0x34, 0x31, 0x39, 0x44,
                0x00, 0x00, 0x01, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20


                , 0x73, 0x78, 0x78, 0x61, 0x70, 0x69, 0x30, 0x31, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30,
                0x30, 0x31, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                ,
                0x73, 0x73, 0x6C, 0x53, 0x78, 0x78, 0x30, 0x31, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30,
                0x30, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50
//                ,
//                0x41, 0x58, 0x42, 0x41, 0x53, 0x45, 0x2E, 0x53, 0x4F, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x31, 0x2E, 0x32, 0x38,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x74,
//                0x74, 0x70, 0x53, 0x78, 0x78, 0x30, 0x31, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x30, 0x31,
//                0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x72, 0x79,
//                0x70, 0x74, 0x6F, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x30, 0x31, 0x31,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4C, 0x45, 0x4E,
//                0x54, 0x52, 0x59, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x35, 0x30, 0x35, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x5F, 0x51, 0x50, 0x42,
//                0x4F, 0x43, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x56, 0x30, 0x31, 0x33, 0x30, 0x33, 0x33, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x42, 0x5F, 0x45, 0x4D, 0x56, 0x30,
//                0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x56, 0x30, 0x31, 0x30, 0x36, 0x30, 0x33, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x75, 0x74, 0x69, 0x6C, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56,
//                0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x74, 0x6D, 0x73, 0x72, 0x65, 0x73, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x30,
//                0x31, 0x30, 0x30, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x74, 0x6D, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31,
//                0x30, 0x30, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x74, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30,
//                0x30, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73,
//                0x65, 0x74, 0x75, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x30,
//                0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x33,
//                0x6C, 0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x30, 0x30,
//                0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x33, 0x65,
//                0x78, 0x6C, 0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x72, 0x69, 0x6E,
//                0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x56, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x6F, 0x73, 0x69, 0x6E,
//                0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x56, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x70, 0x65, 0x64, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x56, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x70, 0x61, 0x78, 0x62, 0x6D, 0x70, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56,
//                0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        System.out.println("asa = " + asa.length);
        String s = new String(asa);
        System.out.println("s = " + s);
    }


    @Test
    public void dsaaa() {
//        List a = new ArrayList();
//
//        byte[] bytes = new byte[]{(byte) 0xA1, 0X24, 0X14};
//
//        a.add(bytes);
//        byte b = calLRC(a);
//        byte[] bytes1 = new byte[1];
//        bytes1[0] = b;
//
//  printHexString(bytes1);

        System.out.println();

        byte[] bytes2 = {(byte) 0x03, (byte) 0xd7};//983
        String s = HexUtils.toHexString(bytes2);

        System.out.println("s = " + s);
//        System.out.println("son_dlen = " + son_dlen);

        byte[] bt = new byte[]{
                0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x20, 0x34, 0x30, 0x30, 0x20, 0x0D, 0x0A, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x65, 0x72, 0x2D, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3A, 0x20, 0x63, 0x68, 0x75, 0x6E, 0x6B, 0x65, 0x64, 0x0D, 0x0A, 0x44, 0x61, 0x74, 0x65, 0x3A, 0x20, 0x54, 0x75, 0x65, 0x2C, 0x20, 0x30, 0x34, 0x20, 0x4A, 0x75, 0x6C, 0x20, 0x32, 0x30, 0x31, 0x37, 0x20, 0x30, 0x37, 0x3A, 0x33, 0x33, 0x3A, 0x30, 0x37, 0x20, 0x47, 0x4D, 0x54, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x0D, 0x0A, 0x0D, 0x0A, 0x30, 0x0D, 0x0A, 0x0D, 0x0A
        };
        String s1 = new String(bt);
        System.out.println("s1 = " + s1);
    }

    public static int btLen2IntLen(byte[] bt_len) {
        String hex_len = HexUtils.toHexString(bt_len);
        int int_len = Integer.parseInt(hex_len, 16);
        return int_len;
    }
}

